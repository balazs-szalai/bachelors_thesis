'''
Helium property data prescribed in (the 'Ref' henceforth)
'The Observed Properties of Liquid Helium at the Saturated Vapor Pressure',
Russell J. Donnelly and Carlo F. Barenghi,
Journal of Physical and Chemical Reference Data 27, 1217 (1998)
https:// doi.org/10.1063/1.556028

All functions are vectorized via Numpy's array type, so it is advantageous
to pass in multiple inputs at once.

Some functions take an optional 'diffs' argument. If it is True,
the function returns the first and second derivatives with respect to
the input variable (most often T) along with the normal return values.

Each function has a range for the input. To retrieve this range for a given
function, use its 'range' attribute, e.g.

    helium.SVP.range    (should give [0.5, 5.1], i.e. 0.5 K <= T <= 5.1 K)

Input values outside this range return NaN instead of giving errors so as to
not grieve the user too much.
'''

import numpy as np
from .polynomial import Polynomial

T_lambda = 2.1768
molar_mass = 4.0026e-3  # kg/mol, yes it's unusual
quantized_circulation = 9.97e-8     # kappa, in m^2/s

# pressure conversions into Pascal
torr = 133.322
mbar = 100
psi = 6894.76

# internal convenience constants
_nan = float('nan')
_inf = float('inf')

def _to_array(x):
    if not getattr(x, '__len__', None):
        return np.array([x])

    return x if isinstance(x, np.ndarray) else np.array(x)

def _calc_slice(func, arr_in, arr_out, d1, d2, diffs):
    idx = (func.range[0] <= arr_in) & (arr_in <= func.range[1])
    if diffs:
        v, v1, v2 = func(arr_in[idx], True)
        arr_out[idx] = v
        d1[idx] = v1
        d2[idx] = v2
    else:
        arr_out[idx] = func(arr_in[idx], False)

def _build_function(name, rng, knots, coefs):
    lower, upper = rng

    knots, coefs = np.array(knots), np.array(list(zip(*coefs)))

    def spline_func(x, diffs=False):
        x = _to_array(x)
        res = x*_nan

        valid = (x >= lower) & (x <= upper)

        if np.any(valid):
            pos = np.searchsorted(knots, x[valid], side='right') - 1
#            pos[x == lower] = 0
            polies = Polynomial(coefs[:, pos])

            y = x[valid] - knots[pos]
            res[valid] = polies.evaluate(y)

        if diffs:
            d1, d2 = x*_nan, x*_nan
            if np.any(valid):
                p1 = polies.diff()
                p2 = p1.diff()
                d1[valid] = p1.evaluate(y)
                d2[valid] = p2.evaluate(y)
            return res, d1, d2

        return res

    spline_func.range = [lower, upper]
    return spline_func

SVP = _build_function('SVP', (0.5, 5.1), [
          0.5,  0.52,  0.53,  0.56,   0.6,  0.65,   0.7,  0.75,   0.8,  0.85,  0.92,     1, 
          1.1,  1.25,   1.5,   1.7,  1.85,     2,   2.2,   2.5,   2.7,     3,   3.3,   3.7, 
         4.05,   4.5, 
    ], [
        [ 1.8379700000000e-03,  9.9304500000000e-02,  1.3347750000000e+00, -2.3357361111111e+01 ],
        [ 4.1711111111111e-03,  1.2466666666667e-01, -6.6666666666666e-02,  9.0138888888889e+01 ],
        [ 5.5012500000000e-03,  1.5037500000000e-01,  2.6375000000000e+00,  1.6408730158730e+01 ],
        [ 1.2829285714286e-02,  3.5292857142857e-01,  4.1142857142857e+00,  3.7500000000000e+01 ],
        [ 3.5929285714286e-02,  8.6207142857143e-01,  8.6142857142857e+00,  7.6612380952381e+01 ],
        [ 1.1014511904762e-01,  2.2980928571429e+00,  2.0106142857143e+01,  1.3685238095238e+02 ],
        [ 2.9242166666667e-01,  5.3351000000000e+00,  4.0634000000000e+01,  2.2912000000000e+02 ],
        [ 6.8940166666667e-01,  1.1116900000000e+01,  7.5002000000000e+01,  3.4744156862745e+02 ],
        [ 1.4761818627451e+00,  2.1222911764706e+01,  1.2711823529412e+02,  4.7882990196079e+02 ],
        [ 2.9149767769608e+00,  3.7525959558824e+01,  1.9894272058824e+02,  7.1107561624650e+02 ],
        [ 6.7605122133333e+00,  7.5830752000000e+01,  3.4826860000000e+02,  9.9977595117845e+02 ],
        [ 1.5567776700337e+01,  1.5074942626263e+02,  5.8821482828283e+02,  1.4844451178451e+03 ],
        [ 3.8009312727273e+01,  3.1292574545455e+02,  1.0335483636364e+03,  1.9548480808081e+03 ],
        [ 1.1480062500000e+02,  7.5494250000000e+02,  1.9132300000000e+03,  3.1016192592593e+03 ],
        [ 4.7157592592593e+02,  2.2931111111111e+03,  4.2394444444444e+03,  3.5514021164021e+03 ],
        [ 1.1281871428571e+03,  4.4150571428571e+03,  6.3702857142857e+03,  4.1949206349206e+03 ],
        [ 1.9479350000000e+03,  6.6093000000000e+03,  8.2580000000000e+03,  1.4320390720391e+03 ],
        [ 3.1299681318681e+03,  9.1833626373626e+03,  8.9024175824176e+03,  1.6107692307692e+03 ],
        [ 5.3356235164835e+03,  1.2937621978022e+04,  9.8688791208791e+03,  4.4625549450550e+03 ],
        [ 1.0225598214286e+04,  2.0063839285714e+04,  1.3885178571429e+04,  2.0967857142857e+03 ],
        [ 1.4810547500000e+04,  2.5869525000000e+04,  1.5143250000000e+04,  3.9380555555556e+03 ],
        [ 2.4040625000000e+04,  3.6018750000000e+04,  1.8687500000000e+04,  2.4844104308390e+03 ],
        [ 3.6595204081633e+04,  4.7902040816327e+04,  2.0923469387755e+04,  3.7066326530612e+03 ],
        [ 5.9341000000000e+04,  6.6420000000000e+04,  2.5371428571428e+04,  2.6607142857144e+03 ],
        [ 8.5810078125000e+04,  8.5157812500000e+04,  2.8165178571429e+04,  4.5009763164525e+03 ],
        [ 1.3024469387755e+05,  1.1324081632653e+05,  3.4241496598639e+04,  4.8651738473168e+03 ],
    ])

SVP.__doc__ = '''
SVP: Kelvin -> Pa

Saturated vapor pressure as a function of temperature, by spline fit
(Ref. Table 17.2)
'''

def _create_SVP_to_T():
    # mid range
    a0 = Polynomial([ 1.392408, 0.527153, 0.166756, 0.050988, 0.026514,
          0.001975,-0.017976, 0.005409, 0.013259])
    b0 = 5.6
    c0 = 2.9

    # high range
    a1 = Polynomial([ 3.146631, 1.357655, 0.413923, 0.091159, 0.016349,
          0.001826,-0.004325,-0.004973])
    b1 = 10.3
    c1 = 1.9
 
    def SVP_T_log(p, a, b, c):
        return a.evaluate((np.log(p) - b)/c)

    limits = [1.83797e-3, 114.73433963428187, 5041.815157598342, 2.116e5]

    def SVP_to_T(svp):
        svp = _to_array(svp)
        res = svp*0 + .5

#        set_trace()
        low = (limits[0] <= svp) & (svp < limits[1])
        if any(low):
            L0, i0, R = 59.83, 12.2440, 8.314510

            p = svp[low]
            logp = np.log(p*10) - i0
            t = p*0 + 1.0
            for _ in range(10):
                t = L0/R/(2.5*np.log(t) - logp)

            res[low] = t

        i1 = (limits[1] <= svp) & (svp < limits[2])
        res[i1] = a0.evaluate((np.log(svp[i1]) - b0)/c0)

        i2 = (limits[2] <= svp) & (svp <= limits[3])
        res[i2] = a1.evaluate((np.log(svp[i2]) - b1)/c1)
    
        return res
        
    SVP_to_T.__doc__ = '''
SVP_to_T: Pa -> Kelvin

Tri-segment fitting of temperature as a function of saturated vapor
pressure. Note that SVP_to_T() is not an exact inverse of SVP() due
to the different methods used in calculating them.

(Ref. Table 17.1 and the first equation on p. 1268 (it seems the latter
of which should say P/10 instead of P?))

'''

    SVP_to_T.range = [limits[0], limits[-1]]

    return SVP_to_T

SVP_to_T = _create_SVP_to_T()
first_sound_velocity = _build_function('first_sound_velocity', (0, 4.248035), [
                 0,  0.5016077,  0.7021246,   1.002777,   1.804065,   2.004234, 
          2.154563,   2.169604,     2.1758,     2.1763,    2.17675,   2.176797, 
           2.17681,    2.17683,    2.17695,     2.1773,      2.178,   2.184625, 
          2.224629,   2.505156, 
    ], [
        [ 2.3821000000000e+02, -3.5286539660358e-02,  2.0834014929060e-01,  9.8180824495942e-03 ],
        [ 2.3824595966109e+02,  1.8113449810723e-01,  2.2311462655813e-01, -6.8838335645601e+00 ],
        [ 2.3823575220153e+02, -5.5972444518263e-01, -3.9178602728866e+00,  3.4508012753150e+00 ],
        [ 2.3780710781343e+02, -1.9797795374602e+00, -8.0538521684662e-01, -8.7434321754690e+00 ],
        [ 2.3120533235247e+02, -2.0111959243308e+01, -2.1823407059898e+01, -3.6744889272896e+01 ],
        [ 2.2601042448428e+02, -3.3265540103558e+01, -4.3888970282498e+01, -1.7143709322100e+02 ],
        [ 2.1943539494734e+02, -5.8083932116039e+01, -1.2120487064293e+02, -3.8365230361553e+04 ],
        [ 2.1840378682775e+02, -8.7768308704661e+01, -1.8523591602481e+03, -2.4167963703644e+05 ],
        [ 2.1773137393381e+02, -1.3855728883211e+02, -6.3447002534296e+03, -1.0134696518537e+08 ],
        [ 2.1764784074368e+02, -2.2091221297455e+02, -1.5836514803148e+05, -6.1317498235993e+08 ],
        [ 2.1746048573510e+02, -7.3594464798706e+02, -9.8615137422812e+05, -5.7422659967582e+11 ],
        [ 2.1736410000000e+02,  4.7792307692157e+04, -2.9637439483326e+09,  7.0984895873928e+13 ],
        [ 2.1764048108897e+02,  6.7243072435717e+03, -1.9533300924062e+08,  3.0319235605653e+12 ],
        [ 2.1772108941862e+02,  2.5492951466336e+03, -1.3417595609656e+07,  3.4666358164967e+10 ],
        [ 2.1789369492635e+02,  8.2665887304194e+02, -9.3770667023098e+05,  6.3827118657337e+08 ],
        [ 2.1809552234194e+02,  4.0482886494625e+02, -2.6752192432983e+05,  1.1567653736958e+08 ],
        [ 2.1828749385679e+02,  2.0034268081779e+02, -2.4601195853594e+04,  1.2206271465871e+06 ],
        [ 2.1888993059081e+02,  3.5099100824687e+01, -3.4123131517629e+02,  2.3679308299580e+03 ],
        [ 2.1989954875837e+02,  1.9166207071118e+01, -5.7051200411359e+01,  5.0082291424052e+01 ],
        [ 2.2189214629466e+02, -1.0188595960901e+00, -1.4902895512414e+01,  8.7921290040403e-01 ],
    ])

first_sound_velocity.__doc__ = '''
first_sound_velocity: Kelvin -> m/s

First sound velocity as a function of temperature.
(Ref. Table 3.2)
'''

second_sound_velocity = _build_function('second_sound_velocity', (0.5517426, 2.1768), [
         0.5517426,    0.64197,    0.80623,     0.9297,    1.06964,     1.2855, 
            1.7202,    1.94043,    2.06885,    2.12622,   2.153079,   2.164207, 
          2.169182,   2.170551,   2.174832,   2.175738,   2.176319,     2.1766, 
          2.176735,    2.17678,   2.176787,   2.176797, 
    ], [
        [ 1.0500000000000e+02, -4.0317298292980e+02, -1.1676401695546e+03,  9.0908042787984e+03 ],
        [ 6.5794567898817e+01, -3.9185498754453e+02,  1.2930787323999e+03, -1.7450425533466e+03 ],
        [ 2.8583522309663e+01, -1.0830356150241e+02,  4.3315666296180e+02, -6.9472545198042e+02 ],
        [ 2.0507017807357e+01, -3.3112792104487e+01,  1.7582340829373e+02, -3.2919311382358e+02 ],
        [ 1.8414254273822e+01, -3.2433039064133e+00,  3.7621555248314e+01, -5.3992023077177e+01 ],
        [ 1.8924093481148e+01,  5.4513115772585e+00,  2.6574009439954e+00, -1.8467922658688e+01 ],
        [ 2.0278927130454e+01, -2.7076666402002e+00, -2.1426616995200e+01, -4.6462482140379e+01 ],
        [ 1.8147114142967e+01, -1.8905700151863e+01, -5.2123914320527e+01, -2.6211551144468e+02 ],
        [ 1.4304507445079e+01, -4.5261394615376e+01, -1.5310653625970e+02, -1.8238706030055e+03 ],
        [ 1.0859550659403e+01, -8.0837647003071e+01, -4.6701290574299e+02, -1.3473502562917e+04 ],
        [ 8.0903606150268e+00, -1.3508423823344e+02, -1.5526673217552e+03, -7.4133992940031e+04 ],
        [ 6.2927155718575e+00, -1.9718096939004e+02, -4.0275565420652e+03, -5.6567845773619e+05 ],
        [ 5.1424012529976e+00, -2.7925784311761e+02, -1.2470307523778e+04,  3.6485286501616e+06 ],
        [ 4.7460870280622e+00, -2.9288775480716e+02,  2.5141996424352e+03, -6.0942751668345e+06 ],
        [ 3.0601692536337e+00, -6.0642980738613e+02, -7.5754576325216e+04, -5.0698821757455e+07 ],
        [ 2.4108581959705e+00, -8.6854335385576e+02, -2.1355397386199e+05, -2.7896923621117e+08 ],
        [ 1.7794347473553e+00, -1.3992004745174e+03, -6.9979735257802e+05, -2.5209249370209e+09 ],
        [ 1.2750683293980e+00, -2.3896508485236e+03, -2.8249370744882e+06, -1.6052010687558e+11 ],
        [ 5.0604132871342e-01, -1.1928820702027e+04, -6.7835580358991e+07,  2.4865272121146e+12 ],
        [ 5.8462139098962e-02, -2.9283701207014e+03,  2.6784559327702e+08, -1.4200683803616e+13 ],
        [ 4.6217147779871e-02, -1.2660323339601e+03, -3.0368766602761e+07, -3.4315125135992e+12 ],
        [ 2.7088435266205e-02, -2.9028614201126e+03, -1.3331414201141e+08, -2.4375124918589e+14 ],
    ])

second_sound_velocity.__doc__ = '''
second_sound_velocity: Kelvin -> m/s

Second sound velocity as a function of temperature.
(Ref. Table 4.2)
'''

fourth_sound_velocity = _build_function('fourth_sound_velocity', (1.190093, 2.1768), [
         1.190093,   1.62263,   1.77058,   1.93677,   2.04231,   2.12961,  2.161789, 
    ], [
        [ 2.3469920000000e+02, -2.0351784934006e+01, -5.0507993760847e+01, -4.5485090665295e+01 ],
        [ 2.1276607602851e+02, -8.9574116038744e+01, -1.0952994774413e+02, -1.5524360498324e+02 ],
        [ 1.9661330477400e+02, -1.3217850369516e+02, -1.7843482181594e+02, -3.5514901409890e+02 ],
        [ 1.6808820578590e+02, -2.2091337532993e+02, -3.5550146577523e+02, -1.5504936294244e+03 ],
        [ 1.3899046152054e+02, -3.4776403582354e+02, -8.4641875872358e+02, -7.8809433576537e+03 ],
        [ 9.6936362417234e+01, -6.7573761550343e+02, -2.9104378240931e+03, -2.2928862915823e+05 ],
        [ 6.4537958668863e+01, -1.5753244732783e+03, -2.5045274217141e+04, -1.0420704551887e+07 ],
    ])

fourth_sound_velocity.__doc__ = '''
fourth_sound_velocity: Kelvin -> m/s

Fourth sound velocity as a function of temperature.
(Ref. Table 6.2)
'''


def _create_density_functions():
    a_mid = [-7.575_37e-3, 6.874_83e-3]
    b_mid = Polynomial([0, 3.799_37e-3, 1.865_57e-3, 4.883_45e-3])
    b_mid_d1 = b_mid.diff() + a_mid
    b_mid_d2 = b_mid_d1.diff()

    a_hi = [-7.946_05e-3, 5.070_51e-3]
    b_hi = Polynomial([0, -30.351_1e-3, -10.232_6e-3, -3.006_36e-3, 0.240_720e-3,
                    -2.457_49e-3, 1.534_54e-3, -0.3081_82e-3])
    b_hi_d1 = b_hi.diff() + a_hi
    b_hi_d2 = b_hi_d1.diff()

    m_lo = Polynomial((0.145_139_7e3, 0, -1.269_35e-2, 7.124_13e-2, -16.746_1e-2, 8.753_42e-2))
    m_lo_d1 = m_lo.diff()
    m_lo_d2 = m_lo_d1.diff()

    rho_lambda = 0.146_108_7e3

    thresh = [1.344, T_lambda, 5.2]

    def _density(T, diffs=False):
        '''Density function from spline fit'''
        # for middle and hight range; b is already a polymial
        def _rho(t, a, b, ln_t):
            delta_rho = ln_t*(a[0] + a[1]*t)*t + b.evaluate(t)
            return (delta_rho + 1)*rho_lambda

        def _d_rho(t, a, b, ln_t):
            d = ln_t*(a[0] + 2*a[1]*t) + b.evaluate(t)
            return d*rho_lambda

        def _dd_rho(t, a, b, ln_t):
            d = a[0]/t + 2*a[1]*ln_t + b.evaluate(t) + 3*a[1]
            return d*rho_lambda

        T = _to_array(T)
        i0 = (0 <= T) & (T <= thresh[0])
        i1 = (thresh[0] < T) & (T <= thresh[1])
        i2 = (thresh[1] < T) & (T <= thresh[2])

        rho = T*_nan

        rho[i0] = m_lo.evaluate(T[i0])

        t = T - T_lambda
        ln_t = np.log(np.abs(t))
        rho[i1] = _rho(t[i1], a_mid, b_mid, ln_t[i1])
        rho[i2] = _rho(t[i2], a_hi, b_hi, ln_t[i2])

        if diffs:
            d1, d2 = T*_nan, T*_nan
            d1[i0] = m_lo_d1.evaluate(T[i0])
            d2[i0] = m_lo_d2.evaluate(T[i0])

            d1[i1] = _d_rho(t[i1], a_mid, b_mid_d1, ln_t[i1])
            d2[i1] = _d_rho(t[i1], a_mid, b_mid_d2, ln_t[i1])

            d1[i2] = _d_rho(t[i2], a_hi, b_hi_d1, ln_t[i2])
            d2[i2] = _d_rho(t[i2], a_hi, b_hi_d2, ln_t[i2])

            return rho, d1, d2

        return rho

    _density.range = [0, 5.2]

    _s = Polynomial([0, -0.117_818, 1.640_45, -6.187_50,
                    13.429_3, -11.397_1, 2.941_76])*1e-3
    def _exp_coef(T):
        T = _to_array(T)
        rho, d1, _ = _density(T, True)
        ep = -d1/rho

        lo = (0.15 <= T) & (T < thresh[0])
        ep[lo] = _s.evaluate(T[lo])

        # Donelly wasn't clear on what happens for T < 150 mK
        ep[T < 0.15] = _nan

        return ep

    _exp_coef.range = _density.range

    def _dielec(T):
        rho = _density(T)
        eta = 4*np.pi*0.123_296e-3/(3*4.0026)*rho
        return 3/(1 - eta) - 2
    _dielec.range = _density.range

    return _density, _exp_coef, _dielec

density, thermal_expansion_coefficient, dielectric_constant = _create_density_functions()

density.__doc__ = '''
density: Kelvin -> kg/m^3

Density of liquid helium as a function of temperature.
(Ref. Eqs. 1.2 to 1.5)
'''

thermal_expansion_coefficient.__doc__ = '''
thermal_expansion_coefficient: Kelvin -> 1/Kelvin

Expansion coefficients of helium at SVP, as derived from density
(Ref. Eq. 1.6)
'''

dielectric_constant.__doc__ = '''
dielectric_constant: Kelvin -> (dimensionless)

Dielectric constant of liquid helium derived from density.
(Ref. Eq. 1.7)
'''

superfluid_density = _build_function('superfluid_density', (0, 2.1768), [
                  0,       0.443,      0.9012,      1.5419,       1.754, 
              1.918,       2.111,    2.156991,    2.173218,    2.175647, 
           2.176358,    2.176568,    2.176692,    2.176766,    2.176791, 
           2.176798,    2.176799,  2.17679999, 
    ], [
        [ 1.4512754328225e+02,  4.0043254977313e-02, -1.2741940788390e+00,  2.2492906842976e+00 ],
        [ 1.4509077265447e+02,  2.3537044363405e-01,  1.7151132405925e+00, -9.1207759405427e+00 ],
        [ 1.4468130387174e+02, -3.9375449888130e+00, -1.0822305367277e+01, -4.3985981928721e+01 ],
        [ 1.2614746280439e+02, -7.1973520659273e+01, -9.5367761232472e+01, -8.1619823084608e+01 ],
        [ 1.0581284072771e+02, -1.2344387345032e+02, -1.4730245466121e+02, -6.8178217006685e+01 ],
        [ 8.1305468364050e+01, -1.7726024255303e+02, -1.8084613742850e+02, -8.7273122175734e+02 ],
        [ 3.4083789279348e+01, -3.4459194743815e+02, -6.8615751482600e+02, -1.6595008097709e+04 ],
        [ 1.5169976018509e+01, -5.1300998140360e+02, -2.9758205670911e+03, -3.1884868951763e+05 ],
        [ 4.6993998786424e+00, -8.6146069614185e+02, -1.8497693621499e+04, -1.8871325053748e+07 ],
        [ 2.2273259710871e+00, -1.2853472663795e+03, -1.5601303928817e+05, -1.8024418957853e+08 ],
        [ 1.1697918515329e+00, -1.7805494771269e+03, -5.4047389565912e+05, -1.4486241247939e+09 ],
        [ 7.5862585451789e-01, -2.1992014850141e+03, -1.4531070942795e+06, -5.2312179140872e+09 ],
        [ 4.5360793007023e-01, -2.8008776643365e+03, -3.3991201583201e+06, -4.5464032693912e+10 ],
        [ 2.0930628373749e-01, -4.0508305768670e+03, -1.3492135416386e+07, -8.9765927081259e+11 ],
        [ 8.5577008574497e-02, -6.4085484804505e+03, -8.0816580727174e+07, -1.5201217789618e+13 ],
        [ 3.1543139057331e-02, -9.7745596254216e+03, -4.0004215429301e+08, -1.4215586813556e+15 ],
        [ 1.9946978594187e-02, -1.4839319979378e+04, -4.6647181989559e+09,  3.0752071366520e+15 ],
        [ 3.6680319142769e-03, -1.5033430467621e+04,  4.4686469987455e+09, -3.5181445393530e+21 ],
    ])

superfluid_density.__doc__ = '''
superfluid_density: Kelvin -> kg/m^3

Superfluid helium as a function of temperature from spline fit
(Ref. Table 2.2)
'''

def normal_fluid_density(T, diffs=False):
    '''normal_fluid_density: Kelvin -> kg/m^3

Normal fluid density as a function of temperature. It is evaluated
as density - superfluid_density
'''
    if diffs:
        t0, t1, t2 = density(T, True)
        s0, s1, s2 = superfluid_density(T, True)
        return t0 - s0, t1 - s1, t2 - s2

    return density(T) - superfluid_density(T)

_log10_Cs_lo = _build_function('_log10_Cs_lo', (0.01, 2.17679996468), [
                   0.01,  0.024973899074,  0.060764110599,  0.063652865377, 
         0.154157179076,  0.249299135447,  0.634497077644,  0.904465380669, 
          1.17474564385,   1.54255910867,    2.0649908872,   2.16070930746, 
          2.17157525125,     2.175906292,     2.176553159,     2.176728499, 
            2.176787881,     2.176796632,     2.176799582, 
    ], [
        [-7.0800290000000e+00,  1.2398073413113e+02, -4.1227069139757e+03,  7.5188615030326e+04 ],
        [-5.8954984732329e+00,  5.1090584139182e+01, -7.4510671504186e+02,  5.9708824423746e+03 ],
        [-4.7476564686161e+00,  2.0700543130673e+01, -1.0400927823137e+02, -1.8136583821691e+02 ],
        [-4.6887299952736e+00,  2.0095088090160e+01, -1.0558104252652e+02,  2.9756127376544e+02 ],
        [-3.5142662090867e+00,  8.2960091764139e+00, -2.4789305929892e+01,  5.6227274758293e+01 ],
        [-2.9009359709606e+00,  5.1059095505361e+00, -8.7405871641510e+00,  1.0633969284876e+01 ],
        [-1.6232749746499e+00,  3.1057210587632e+00,  3.5479620936101e+00, -7.6870713873231e+00 ],
        [-6.7749436338342e-01,  3.3406278585975e+00, -2.6778347593929e+00,  1.4420207203685e+00 ],
        [ 5.8263552145090e-02,  2.2091210783043e+00, -1.5085855399519e+00,  9.5648555974019e-01 ],
        [ 7.1431139843308e-01,  1.4875643832218e+00, -4.5316073661690e-01,  2.9279936524331e-01 ],
        [ 1.4095291275569e+00,  1.2538187959892e+00,  5.7423427926168e-03,  8.2610201500482e+01 ],
        [ 1.6020422671519e+00,  3.5255460499997e+00,  2.3727696297752e+01,  1.4903392342593e+04 ],
        [ 1.6622721342203e+00,  9.3200676970659e+00,  5.0954596672255e+02,  3.7223238647486e+05 ],
        [ 1.7424363858124e+00,  3.4680705644954e+01,  5.3460068696001e+03,  8.6720823759956e+07 ],
        [ 1.7905801447908e+00,  1.5045859855674e+02,  1.7363652417898e+05,  1.8084648551724e+09 ],
        [ 1.8320486999145e+00,  3.7814841255414e+02,  1.1249252072977e+06,  1.3230925580828e+11 ],
        [ 1.8861754237806e+00,  1.9114044256059e+03,  2.4695289892474e+07,  2.1003326092743e+13 ],
        [ 1.9188687015821e+00,  7.1689255885744e+03,  5.7609560978964e+08,  8.3101944160924e+14 ],
        [ 1.9663647468589e+00,  3.2263729762574e+04,  7.9306176687258e+09,  6.7038516622703e+17 ],
    ])

_log10_Cs_hi = _build_function('_log10_Cs_hi', (2.176800132, 5.06143581698), [
           2.176800132,    2.176801012,    2.176803495,    2.176818018, 
           2.176924206,    2.177507556,    2.180863971,  2.20374020794, 
         2.30368058865,  2.60849038128,  3.60335763894,  4.41358469422, 
         4.81404577042, 
    ], [
        [ 1.9005390000000e+00, -1.2843409091188e+05,  1.0495967066493e+11, -3.6892071240243e+16 ],
        [ 1.8436568553888e+00, -2.9412730447219e+04,  7.5646025928060e+09, -9.4696621776868e+14 ],
        [ 1.8027664572730e+00, -9.3618751884062e+03,  5.1065123586546e+08, -1.1427146917266e+13 ],
        [ 1.7395061154189e+00, -1.7600561653890e+03,  1.2781871829388e+07, -3.8695827339613e+10 ],
        [ 1.6504032650981e+00, -3.5448318739406e+02,  4.5477428880351e+05, -2.5001543547851e+08 ],
        [ 1.5487427647560e+00, -7.9136699473385e+01,  1.7234775944112e+04, -1.6471386114006e+06 ],
        [ 1.4150046816555e+00, -1.9110205545316e+01,  6.4933371696130e+02, -9.0735171446816e+03 ],
        [ 1.2090209434550e+00, -3.6467009324104e+00,  2.6629932718627e+01, -8.0775204872671e+01 ],
        [ 1.0299193360611e+00, -7.4425725534611e-01,  2.4118185379182e+00, -2.4499432910516e+00 ],
        [ 9.5776075312377e-01,  4.3169146607576e-02,  1.7151841841611e-01, -5.6689112162179e-02 ],
        [ 1.1146498678952e+00,  2.1611927046249e-01,  2.3239937482066e-03,  3.7084966288033e-02 ],
        [ 1.3110062252084e+00,  2.9292046340485e-01,  9.2465722840341e-02,  6.1988506338630e-01 ],
        [ 1.4829481046274e+00,  6.6520948913594e-01,  8.3718524165229e-01,  2.2403429223939e+00 ],
    ])


def heat_capacity(T, diffs=False):
    '''
heat_capacity: Kelvin -> J/(mol K)

Specific heat of helium at SVP, from a spline fit
(Ref. Table 7.1)
'''

    T = _to_array(T)
    res = T + _nan

    d1, d2 = (T + _nan, T + _nan) if diffs else (None, None)
    _calc_slice(_log10_Cs_lo, T, res, d1, d2, diffs)
    _calc_slice(_log10_Cs_hi, T, res, d1, d2, diffs)

    l10 = np.log(10)

    # convert from log10(Cs) to Cs
    res = 10**res

    if not diffs:
        return res

    d1 *= res*l10
    d2 = d2*res*l10 + d1/res
    return res, d1, d2

heat_capacity.range = [_log10_Cs_lo.range[0], _log10_Cs_hi.range[1]]

enthalpy = _build_function('enthalpy', (0.2, 4.9), [
             0.2,      0.3,     0.37,      0.5,     0.61,  0.74395,     0.87,  1.02755, 
            1.25,      1.5,     1.75,      2.0,     2.13,  2.19012,  2.23294,   2.8542, 
             4.0, 
    ], [
        [ 3.3892592592593e-05,  6.4007777777778e-04,  4.7647777777778e-03,  1.9548671023965e-02 ],
        [ 1.6509681917211e-04,  2.1794934640523e-03,  1.0629379084967e-02,  2.3173041223658e-02 ],
        [ 3.7769367231183e-04,  4.0082502419355e-03,  1.5495717741935e-02,  3.9641025403249e-02 ],
        [ 1.2477351664131e-03,  1.0046936842783e-02,  3.0955717649203e-02,  7.9520670538382e-02 ],
        [ 2.8333044151612e-03,  1.9743795066151e-02,  5.7197538926869e-02,  4.0336771178946e-01 ],
        [ 7.4737171087619e-03,  5.6779415286578e-02,  2.1929085390946e-01,  9.8155072786702e-01 ],
        [ 2.0080796526687e-02,  1.5884904760315e-01,  5.9046426165238e-01,  2.1133296213818e+00 ],
        [ 6.8028581229495e-02,  5.0227555588560e-01,  1.5893295071985e+00,  3.1267113040003e+00 ],
        [ 2.9282411510571e-01,  1.6735348235900e+00,  3.6759402959231e+00,  5.0496585452472e+00 ],
        [ 1.0198550042679e+00,  4.4583159487854e+00,  7.4631842048585e+00,  1.2663646203046e+01 ],
        [ 2.7987524761905e+00,  1.0564341714286e+01,  1.6960918857143e+01,  3.0652961635900e+00 ],
        [ 6.5477905858894e+00,  1.9619544173530e+01,  1.9259890979835e+01,  2.4302899079534e+02 ],
        [ 9.9577581787849e+00,  3.6948685661611e+01,  1.1404119739002e+02, -2.2375983444150e+03 ],
        [ 1.2105078333231e+01,  2.6398176203378e+01, -2.8953204000867e+02,  2.1763930344820e+03 ],
        [ 1.2875450594788e+01,  1.3574244312189e+01, -9.9525907991055e+00,  7.2595187995916e+00 ],
        [ 1.9207960345411e+01,  9.6136896643275e+00,  3.5775551491973e+00,  9.8655640812400e-02 ],
        [ 3.5068551519068e+01,  1.8200577479537e+01,  3.9166740489258e+00,  5.3055182026323e+00 ],
    ])

enthalpy.__doc__ = '''
enthalpy: Kelvin -> J/mol

Enthalpy as a function of temperature by spline fit
(Ref. Table 7.6)
'''

entropy_fountain_pressure = _build_function('entropy_fountain_pressure', (1.153029, 2.1768), [
         1.153029,  1.402666,  1.501863,  1.801948,  2.154592,  2.164268,  2.172874, 
    ], [
        [ 3.9499900000000e+01,  2.0551196337081e+02,  6.4887039811485e+02,  7.7334422403283e+01 ],
        [ 1.3244309982086e+02,  5.4393420869766e+02,  7.0678699773132e+02,  2.0675039849504e+03 ],
        [ 1.9537265393613e+02,  7.4518950388966e+02,  1.3220575761167e+03,  2.9581475028139e+02 ],
        [ 5.4603925167944e+02,  1.6185640479922e+03,  1.5883662841313e+03,  3.5069055135363e+03 ],
        [ 1.4681338090300e+03,  4.0471527937444e+03,  5.2984338478786e+03,  3.1586174644571e+06 ],
        [ 1.5106515649902e+03,  5.0368645384774e+03,  9.6986781606129e+04, -3.1183039527063e+06 ],
        [ 1.5591944059317e+03,  6.0133459787752e+03,  1.6478410155150e+04, -6.7419746849327e+07 ],
    ])

entropy_fountain_pressure.__doc__ = '''
entropy_fountain_pressure: Kelvin -> J/(kg K)

Fountain pressure entropy of liquid heliium
(Ref. Table 8.1)
'''

entropy = _build_function('entropy', (0.1, 5.0), [
             0.1,  0.11123,  0.21625,  0.27672,  0.44817,  0.56369,  0.71969,   0.8536, 
         1.00186,  1.40184,  1.72912,  1.99887,  2.07775,  2.15384,   2.1768,   2.2116, 
          2.3482,  2.69075,  4.38277,  4.76361, 
    ], [
        [ 6.6000000000000e-03,  2.6714158504007e-01, -4.4850749324741e+00,  2.0842653145998e+02 ],
        [ 9.3295578241548e-03,  2.4526262501478e-01,  2.5368149124125e+00,  5.6761600166292e+00 ],
        [ 6.9640698984256e-02,  9.6590574819552e-01,  4.3251458872517e+00,  5.4076790533675e+00 ],
        [ 1.4506016206049e-01,  1.5483103885408e+00,  5.3061529443231e+00,  7.0448597283576e+00 ],
        [ 6.0199750374514e-01,  3.9890433545888e+00,  8.9296765456038e+00,  1.1310534962799e+01 ],
        [ 1.1994134825181e+00,  6.5049686933848e+00,  1.2849455542311e+01,  7.3829043304927e+01 ],
        [ 2.8071787100314e+00,  1.5904109616192e+01,  4.7401447809017e+01,  2.3545936484531e+02 ],
        [ 6.3522944374919e+00,  4.1265858315913e+01,  1.4199253844832e+02,  3.1876530765333e+02 ],
        [ 1.6630339038949e+01,  1.0438985289296e+02,  2.8377297198637e+02,  4.6158758206688e+02 ],
        [ 1.3332050189590e+02,  5.5293676330525e+02,  8.3765037521170e+02,  8.4470832649972e+02 ],
        [ 4.3362004400402e+02,  1.3726648904783e+03,  1.6670187985022e+03,  1.7259118792480e+03 ],
        [ 9.5907397190679e+02,  2.6487797895592e+03,  3.0637129867837e+03,  3.9853677704457e+03 ],
        [ 1.1890283117466e+03,  3.2065026755693e+03,  4.0068104159819e+03,  2.7866188952430e+04 ],
        [ 1.4684853804392e+03,  4.3002687123842e+03,  1.0367825368153e+04,  8.2825815367192e+05 ],
        [ 1.5827100000000e+03,  3.5758620689655e+03, -5.3253590884517e+04,  4.7776296324046e+05 ],
        [ 1.6627927053485e+03,  1.6051823204113e+03, -3.3751375222137e+03,  6.7486636017471e+03 ],
        [ 1.8362836701707e+03,  1.0608760295324e+03, -6.0953517821776e+02,  5.6027255378931e+02 ],
        [ 2.1506837391937e+03,  8.4051146793119e+02, -3.3771088316176e+01,  4.7987656015355e+01 ],
        [ 3.7086204463495e+03,  1.1383848962492e+03,  2.0981713287713e+02,  4.1132990152268e+02 ],
        [ 4.1953151430116e+03,  1.4771751730892e+03,  6.7976977196483e+02,  2.5140735553620e+03 ],
    ])

entropy.__doc__ = '''
entropy: Kelvin -> J/(kg K)

Spline fit of entropy as a function of temperature by integrating
heat capacity values. 
(Ref. Table 8.4)
'''

surface_tension = _build_function('surface_tension', (0.0, 5.195767), [
                  0.0,  0.0006482413,      2.004234,        2.1768, 
             2.178377,      2.412388,      2.412896,      3.807062, 
             4.868895,      5.035567, 
    ], [
        [ 3.5439980000000e-04,  5.0536736860176e-04, -7.8437899125658e-01,  4.0333216173826e+02 ],
        [ 3.5450765922021e-04, -3.1055148786067e-06, -9.2966855300375e-06, -1.4861274964985e-06 ],
        [ 2.9901220807361e-04, -5.8256462358369e-05, -1.8229437192826e-05, -4.4296617006390e-04 ],
        [ 2.8613993311015e-04, -1.0412132557727e-04,  1.4331939681856e-02, -3.0121256651777e+00 ],
        [ 2.8599956307954e-04, -8.1391215825828e-05,  8.1573159895815e-05, -1.8705360236180e-04 ],
        [ 2.6902312530274e-04, -7.3942992461441e-05, -4.9744641731208e-05,  1.0639073221987e-02 ],
        [ 2.6898555082001e-04, -7.3985296332196e-05, -3.3530694140742e-05,  1.0622120366761e-05 ],
        [ 1.2944842925198e-04, -1.0554139482301e-04,  1.0896303048996e-05, -2.0262579151037e-06 ],
        [ 2.7240711825993e-05, -8.9255038988022e-05,  4.4416604866909e-06,  3.6184822634703e-05 ],
        [ 1.2655321731827e-05, -8.4758843239713e-05,  2.2534650761205e-05,  8.3845434582430e-05 ],
    ])

surface_tension.__doc__ = '''
surface_tension: Kelvin -> N/m

Surface tension as a function of temperature by splline fit
(Ref. Table 9.2)
'''

_mobility_positive = _build_function('_mobility_positive', (0.02549509, 5.186798), [
         0.02549509,  0.08989802,   0.2949869,   0.4513886,   0.7045304, 
          0.7577476,   0.7944735,     1.06278,    1.394506,    1.791246, 
           2.152366,    2.203504,    2.205589,    2.727358,    4.425492, 
             5.0438,    5.154401, 
    ], [
        [ 3.3243360000000e+00, -9.1646762033963e+00,  1.0928015577455e+02, -7.6326696910115e+02 ],
        [ 2.9834805994206e+00, -4.5862446027183e+00, -3.8189731772447e+01,  9.8413884751272e+01 ],
        [ 1.2855285650152e+00, -7.8325315417433e+00,  2.2361048427816e+01, -7.4402067554454e+01 ],
        [ 3.2284308253951e-01, -6.2978762538337e+00, -1.2548781119279e+01,  3.0998351162396e+01 ],
        [-1.5727077907795e+00, -6.6919236164950e+00,  1.0992154111565e+01, -1.3317090691467e+02 ],
        [-1.9177735082437e+00, -6.6534284301135e+00, -1.0268794250814e+01,  1.9394934459110e+02 ],
        [-2.1663697249377e+00, -6.6228980351240e+00,  1.1100098452741e+01, -1.1760282927295e+01 ],
        [-3.3714075074951e+00, -3.2062519803370e+00,  1.6340173990440e+00,  1.9656829672550e-01 ],
        [-4.2480183846633e+00, -2.0572674813678e+00,  1.8296378434427e+00, -9.3005600980974e-01 ],
        [-4.8343089429837e+00, -1.0446662246306e+00,  7.2266657944695e-01, -3.0248600613781e+00 ],
        [-5.2597667231549e+00, -1.7061222307685e+00, -2.5543458166480e+00,  2.0323564687163e+02 ],
        [-5.3265154073864e+00, -3.7292890481744e-01,  2.8624847712519e+01, -4.4868775987551e+03 ],
        [-5.3272091943969e+00, -3.1207968926414e-01,  5.5942833230759e-01, -3.3002859989430e-01 ],
        [-5.3846221858075e+00,  2.1612149544846e-03,  4.2832254692838e-02, -1.1256436360625e-02 ],
        [-5.3125594955206e+00,  5.0251856110296e-02, -1.4512557215602e-02, -1.4943689635208e-01 ],
        [-5.3223607991344e+00, -1.3908592497868e-01, -2.9170664274461e-01, -2.8249335559879e+01 ],
        [-5.3795317016763e+00, -1.2402988910986e+00, -9.6649209295187e+00,  1.4835945509292e+02 ],
    ])


def ion_mobility_positive(T):
    '''ion_mobility_positive: Kelvin -> m^2/(V s)

Mobility for positive ions.
(Ref. Table 10.2)
'''
    return 10**_mobility_positive(T)

ion_mobility_positive.range = _mobility_positive.range

_mobility_negative = _build_function('_mobility_negative', (0.0351306, 5.186798), [
          0.0351306,  0.05875667,   0.1179363,   0.1537502,   0.1649872, 
          0.6623561,    0.800833,   0.8281207,   0.9599097,    1.152959, 
            1.35184,    1.607292,     2.02129,    2.176597,    2.186372, 
           2.189764,    2.374662,    3.014612,    4.660651,    4.838042, 
           5.105466, 
    ], [
        [ 3.0333740000000e+00, -3.7689848544426e+01, -8.2506275136391e+02,  1.8582677752082e+04 ],
        [ 1.9274340727796e+00, -4.5557768511479e+01,  4.9204418471049e+02, -2.6428998630708e+03 ],
        [ 4.0682441500099e-01, -1.5087901438991e+01,  2.2826676639748e+01,  1.0297105573007e+03 ],
        [-5.6952907499733e-02, -9.4906470697413e+00,  1.3346052942408e+02, -3.5079813015462e+03 ],
        [-1.5172469228081e-01, -7.8201153068497e+00,  1.5202971767657e+01, -1.4828760943720e+01 ],
        [-2.1048460574982e+00, -3.7019754308821e+00, -6.9231217891655e+00,  2.8975105850146e+01 ],
        [-2.6733000379486e+00, -3.9524933083176e+00,  5.1140267167349e+00, -1.6174097572221e+02 ],
        [-2.7806328936013e+00, -4.0346992574251e+00, -8.1265909529099e+00,  4.3233415970892e+01 ],
        [-3.3545478761990e+00, -3.9240117762057e+00,  8.9664750192540e+00, -1.6441740641793e+01 ],
        [-3.8962039362075e+00, -2.3003222848279e+00, -5.5572454578540e-01,  3.9508442576586e+00 ],
        [-4.3445960705032e+00, -2.0525574330794e+00,  1.8015190246368e+00, -5.5106318442633e-01 ],
        [-4.7605526039759e+00, -1.2400342390274e+00,  1.3792084468726e+00, -2.1258766437941e+00 ],
        [-5.1883814215195e+00, -1.1911448602402e+00, -1.2611175894597e+00, -1.3552141234558e+01 ],
        [-5.4545599886688e+00, -2.5635093223248e+00, -7.5753447856121e+00,  5.2221489454625e+03 ],
        [-5.4754645956766e+00, -1.2146685261369e+00,  1.4556417304005e+02, -1.4082433056393e+04 ],
        [-5.4784595369562e+00, -7.1324440538131e-01,  2.2613342582290e+00, -3.6394921473143e+00 ],
        [-5.5560339598858e+00, -2.5028494854564e-01,  2.4252980106671e-01, -1.0973794786353e-01 ],
        [-5.6456395303235e+00, -7.4695977632111e-02,  3.1849401860909e-02, -1.2994367983545e-02 ],
        [-5.7402507862478e+00, -7.5467814737809e-02, -3.2318307582899e-02,  1.2620173233424e-01 ],
        [-5.7539506098369e+00, -7.5019984180508e-02,  3.4842846918622e-02, -8.3369695663302e-01 ],
        [-5.7874653903252e+00, -2.3525136084251e-01, -6.3400887787349e-01,  1.2440006712383e+01 ],
    ])


def ion_mobility_negative(T):
    '''
ion_mobility_negative: Kelvin -> m^2/(V s)

Mobility for negative ions.
(Ref. Table 10.4)
'''
    return 10**_mobility_negative(T)

ion_mobility_negative.range = _mobility_negative.range

_mutual_friction_B = _build_function('_mutual_friction_B', (-5, -0.387958059947), [
                      -5,             -2.5,             -2.0,             -0.8, 
    ], [
        [ 1.3192814443300e+00, -2.3370523958400e-01, -1.0060281834440e-01,  2.4631675447603e-02 ],
        [ 4.9112065958629e-01, -2.7487541666345e-01,  8.4134747512619e-02, -2.2997832332623e-01 ],
        [ 3.4596934771694e-01, -3.6322441164551e-01, -2.6083273747673e-01,  2.7066386926264e-01 ],
        [ 2.2080778616819e-03,  1.8004493362494e-01,  7.1355719186876e-01, -1.2991383759135e-01 ],
    ])


def mutual_friction_B(T):
    '''mutual_friction_B: Kelvin -> (dimensionless)

Mutual friction coefficient B as a function of temperature by
spline fit.
(Ref. Table 11.1)

'''
    T = _to_array(T)
    res = T + _nan
    epsilon = 1 - T/T_lambda

    idx = (2.167 < T) & (T < T_lambda)
    res[idx] = 0.47*epsilon[idx]**(-0.33)

    idx = (T <= 2.167)
    res[idx] = 10**_mutual_friction_B(np.log10(epsilon[idx]))
    return res

mutual_friction_B.range = [_mutual_friction_B.range[0], T_lambda]

def mutual_friction_alpha(T):
    '''mutual_friction_alpha: Kelvin -> (dimensionless)

Mutual friction coefficient alpha defined and calculated by
    alpha = B rho_n/2 rho,
where rho and rho_n are the density and normal fluid density.

'''
    return mutual_friction_B(T)*normal_fluid_density(T)/(2*density(T))

mutual_friction_alpha.range = mutual_friction_B.range

_mutual_friction_Bprime = _build_function('_mutual_friction_Bprime', (-5, -0.384067377871), [
                      -5,            -3.55,             -3.2,             -2.5, 
                    -1.0, 
    ], [
        [-8.4721803252600e-02,  2.1027796932964e+00, -1.4023289330102e+00,  3.3376710210665e-01 ],
        [ 1.0334429020332e+00,  1.4126178410459e-01,  4.9557961153740e-02, -1.3385360243495e-01 ],
        [ 1.0832164035067e+00,  1.2676115801736e-01, -9.0988321402957e-02,  3.5227258738033e-02 ],
        [ 1.1394478863786e+00,  5.1161578398132e-02, -1.7011078053088e-02, -1.5052749062738e-04 ],
        [ 1.1774072980755e+00, -8.8771632286782e-04, -1.7688451760912e-02,  1.0456674709889e-01 ],
    ])


def mutual_friction_Bprime(T):
    '''mutual_friction_Bprime: Kelvin -> (dimensionless)

Mutual friction coefficient B' as a function of temperature
by spline fit
(Ref. Table 11.2)

'''
    T = _to_array(T)
    res = T + _nan
    epsilon = 1 - T/T_lambda

    idx = (2.134 < T) & (T < T_lambda)
    res[idx] = -0.34*epsilon[idx]**(-0.33) + 1.01

    idx = T <= 2.134
    res[idx] = 10**_mutual_friction_Bprime(np.log10(epsilon[idx])) - 15

    return res

mutual_friction_Bprime.range = [_mutual_friction_Bprime.range[0], T_lambda]

def mutual_friction_alphaprime(T):
    '''mutual_friction_alphaprime: Kelvin -> (dimensionless)

Mutual friction coefficient alpha' defined and calculated by
    alpha' = B' rho_n/2 rho,
where rho and rho_n are the density and normal fluid density.

'''
    return mutual_friction_Bprime(T)*normal_fluid_density(T)/(2*density(T))

mutual_friction_alphaprime.range = mutual_friction_Bprime.range

viscosity = _build_function('viscosity', (0.7913364, 4.406982), [
         0.7913364,    0.97051,    1.06473,    1.28593,     1.5821,    1.74701, 
           2.02568,    2.05174,   2.146961,     2.1768,   2.212906,     2.2218, 
             2.618,     3.2537,     3.7842,     4.0254, 
    ], [
        [ 1.7308650000000e-05, -1.7967222849795e-04,  9.0348683653260e-04, -1.6874816131167e-03 ],
        [ 4.4144642286065e-06, -1.8430822925780e-05, -3.5696301351840e-06,  2.0058070907187e-04 ],
        [ 2.8139946340339e-06, -1.3761573413677e-05,  5.3126513091070e-05, -7.6051999114925e-05 ],
        [ 1.5462597314880e-06, -1.4219492049085e-06,  2.6584064784061e-06, -1.7910976449945e-06 ],
        [ 1.3117765885363e-06, -3.1859606877010e-07,  1.0669983098521e-06,  4.0413905873559e-07 ],
        [ 1.2900667326782e-06,  6.6293372437980e-08,  1.2669380263803e-06,  4.9187874799056e-06 ],
        [ 1.5133731181590e-06,  1.9183429911190e-06,  5.3790935474561e-06,  4.3285577765372e-04 ],
        [ 1.5746788705607e-06,  3.0805890688154e-06,  3.9219758244424e-05, -9.9959206025722e-05 ],
        [ 2.1373206834671e-06,  7.8306762577478e-06,  1.0665111573498e-05,  5.0565640321779e-03 ],
        [ 2.5148170000000e-06, -2.2491275688251e-06,  4.8307190592954e-04, -7.0044710280887e-03 ],
        [ 2.7336675755603e-06,  5.2404670695813e-06, -2.7563838689097e-04,  1.0168801248278e-02 ],
        [ 2.7656266022541e-06,  2.7505666985037e-06, -4.3144319844009e-06,  2.9020505384392e-06 ],
        [ 3.3586336053003e-06,  6.9845406843405e-07, -8.6505471441201e-07,  3.1212268928718e-07 ],
        [ 3.5332426515662e-06, -2.2976591273231e-08, -2.6980553367243e-07, -1.5251071202416e-07 ],
        [ 3.4223524727984e-06, -4.3800364593759e-07, -5.1252633185887e-07,  1.4849659394677e-06 ],
        [ 3.3077261573412e-06, -4.2607179789003e-07,  5.6199502193997e-07, -1.2054319252633e-06 ],
    ])

viscosity.__doc__ = '''
viscosity: Kelvin -> Pa s

Dynamic viscosity of liquid helium as a function of temperature
by spline fit
(Ref. Table 12.1)
'''

def kinematic_viscosity(T):
    '''kinematic_viscosity: T -> m^2/s

Kinematic viscosity nu = eta / rho, where eta is the dynamic
viscosity and rho the density.

'''
    return viscosity(T)/density(T)

dispersion_curve = _build_function('dispersion_curve', (0.0894, 3.6), [
         0.0894,    0.15,    0.51,     1.6,   2.023,    2.42,   2.665, 
    ], [
        [ 1.5389500000000e+00,  1.9457920792079e+01,  1.6478051740147e+01, -9.7145031215466e+01 ],
        [ 2.7569941955623e+00,  2.0384806082482e+01, -1.1829149348251e+00, -1.1619207404710e+01 ],
        [ 9.4001128690282e+00,  1.5015559490456e+01, -1.3731658931912e+01,  1.3508918230691e+00 ],
        [ 1.1201932823358e+01, -1.0104473256148e+01, -9.3142426704764e+00,  4.9431092730030e+01 ],
        [ 9.0024419934532e+00,  8.5496454179039e+00,  5.3413814003932e+01, -8.0719287936284e+01 ],
        [ 1.5764480793524e+01,  1.2793954979976e+01, -4.2722857928183e+01,  5.7530626637771e+01 ],
        [ 1.7180612803142e+01,  2.2195821869631e+00, -4.3784734942128e-01, -5.3547204318932e-01 ],
    ])

dispersion_curve.__doc__ = '''
dispersion_curve: 1/angstrom -> Kelvin

Energy of elementary excitations as a function of wavenumber.
Note that the units for this function are not SI, because it is
conventionally written in this way.
'''

structure_factor = _build_function('structure_factor', (0.0, 6.66), [
               0.0,  0.7467679,  0.8843175,   1.171682,   1.483348,   1.615547, 
          1.954501,   2.269539,   2.738304,   4.266671,   4.686186, 
    ], [
        [ 5.0984740000000e-02,  1.4522174828350e-01,  3.7220402647415e-02,  3.3542824450904e-03 ],
        [ 1.8158496702762e-01,  2.0642342268185e-01,  4.4735014019996e-02,  5.9130572214077e-01 ],
        [ 2.1236363589233e-01,  2.5229231127268e-01,  2.8873661069452e-01,  5.9537942567132e-01 ],
        [ 3.2283529049326e-01,  5.6573397705540e-01,  8.0200934359950e-01, -9.5106951260221e-01 ],
        [ 5.4826649430174e-01,  7.8850366933380e-01, -8.7238748544538e-02,  1.5243112051817e+01 ],
        [ 6.8619872620454e-01,  1.5646301192004e+00,  5.9581337618698e+00, -1.3249483598412e+01 ],
        [ 1.3850990566912e+00,  1.0370045381785e+00, -7.5147626289784e+00,  9.2045155903630e+00 ],
        [ 1.2537619758084e+00, -9.5725175349275e-01,  1.1845539186920e+00, -6.0673200299251e-01 ],
        [ 1.0028330062702e+00, -2.4666792714624e-01,  3.3130973654362e-01, -1.0753750590198e-01 ],
        [ 1.0158202580800e+00,  1.2465394371364e-02, -1.6176058930503e-01,  1.6635110894186e-01 ],
        [ 1.0048629474959e+00, -3.5426782956735e-02,  4.7599767098201e-02, -1.5009625778223e-02 ],
    ])

structure_factor.__doc__ = '''
structure_factor: Kelvin -> 1/angstrom

Structure factor as as function of temperature.
(Ref. Table 14.2)
'''

thermal_conductivity = _build_function('thermal_conductivity', (2.176804, 4.216445), [
         2.176804,  2.176806,  2.176814,  2.176841,   2.17689,  2.177066,   2.17725, 
          2.17764,  2.178583,  2.181366,  2.190463,   2.20949,  2.290049,  2.550721, 
    ], [
        [ 4.4670940000000e-01, -5.8127250004782e+04,  8.8903650023586e+09, -9.1775131123307e+14 ],
        [ 3.5867434951553e-01, -3.3578805731258e+04,  3.3838571354132e+09, -1.3607624279879e+14 ],
        [ 2.3693972402013e-01, -5.5637301820643e+03,  1.1802730832966e+08, -1.1629954832546e+12 ],
        [ 1.4986967677943e-01, -1.7337266541299e+03,  2.3824674185267e+07, -1.4862116481222e+11 ],
        [ 1.0463498202681e-01, -4.6942683411534e+02,  1.9773629577875e+06, -3.4488818984598e+09 ],
        [ 6.4464122642105e-02, -9.3892770034284e+01,  1.5635331540355e+05, -1.5674088663852e+08 ],
        [ 5.1504932821823e-02, -5.2274608339883e+01,  6.9832345979108e+04, -4.8002955656445e+07 ],
        [ 3.8891848066109e-02, -1.9709127142218e+01,  1.3668887861082e+04, -4.3283335730957e+06 ],
        [ 2.8831610810221e-02, -5.4765035408410e+00,  1.4240321827899e+03, -1.5751700491440e+05 ],
        [ 2.1224544143597e-02, -1.2102900776585e+00,  1.0892270875964e+02, -3.7597629919317e+03 ],
        [ 1.6398031452425e-02, -1.6197248690669e-01,  6.3150169468399e+00, -1.0300222522851e+02 ],
        [ 1.4892877439906e-02, -3.3529508049242e-02,  4.3554692857095e-01, -1.7546057482493e+00 ],
        [ 1.4101043691655e-02,  2.4840709646200e-03,  1.1499075151316e-02, -1.6866961136864e-02 ],
        [ 1.5231174036339e-02,  5.0407202585031e-03, -1.6911583290901e-03,  2.1769255731210e-04 ],
    ])

thermal_conductivity.__doc__ = '''
thermal_conductivity: Kelvin -> W/(m K)

Thermal conductivity as a function of temperature.
(Ref. Table 15.2)

'''

latent_heat = _build_function('latent_heat', (0.0, 5.195767), [
              0.0,     1.268,   1.98063,    2.1768,    3.7265,    4.3789,  5.106127, 
         5.178168, 
    ], [
        [ 5.9829830000000e+01,  2.0741143533123e+01,  5.9228552983220e-01, -8.2853585289362e-01 ],
        [ 8.5392737586364e+01,  1.8246760149349e+01, -2.5594648545752e+00, -1.0991031934339e+01 ],
        [ 9.3118435226087e+01, -2.1462497187766e+00, -2.6057082116680e+01, -1.2747130105508e+02 ],
        [ 9.0732360000000e+01,  5.7202877976382e+00, -5.9041813158468e-02, -2.3137311936188e+00 ],
        [ 9.0844253095861e+01, -1.1132469290750e+01, -1.0815809505412e+01,  4.1908828054084e-01 ],
        [ 7.9094314688406e+01, -2.4709813229674e+01, -9.9955699227372e+00, -5.1021719169440e+01 ],
        [ 3.6215438122226e+01, -1.2019781278585e+02, -1.2130868522204e+02, -1.6153838168263e+04 ],
        [ 2.0886992997458e+01, -3.8918690020829e+02, -3.6125246516616e+03, -2.3699975060052e+06 ],
    ])

latent_heat.__doc__ = '''
latent_heat: Kelvin -> J/mol

Latent heat of vaporization as a function of temperature.
(Ref. Table 16.2)

'''

def thermal_diffusivity(T):
    '''thermal_diffusivity: Kelvin -> m^2/s

Thermal diffusivity of Helium I.
Corrected Donnelly's first equation in Sect. 18.

(Ref. Sect. 18 equations)
'''
    T = _to_array(T)

    kappa = thermal_conductivity(T)
    rho = density(T)
    _, dP_dT, _ = SVP(T, diffs=True)
    Vm = molar_mass/rho
    alpha = thermal_expansion_coefficient(T)
    Cs = heat_capacity(T)
    Cps = Cs/Vm + T*dP_dT*alpha

    return kappa/Cps

thermal_diffusivity.range = [T_lambda, 4.2]

def prandtl_number(T):
    '''prandtl_number: Kelvin -> (dimensionless)

Prandtl number of Helium I, defined as
        P_r = nu/D_T,
where nu is the kinematic viscosity and D_T the thermal diffusivity.

'''
    return kinematic_viscosity(T)/thermal_diffusivity(T)

prandtl_number.range = thermal_diffusivity.range

_displacement = _build_function('_displacement', (-8.0, 0), [
          -8.0,  -1.55,   -0.7,  -0.53, 
    ], [
        [ 5.5657870000000e+00, -7.0040418604651e-01,  1.7769216483796e-02, -2.2136613456286e-03 ],
        [ 1.1934185212189e+00, -7.4746283180008e-01, -2.5065130554117e-02,  1.6074838962713e-01 ],
        [ 6.3868516214320e-01, -4.4165141922529e-01,  3.8484326299505e-01, -2.1629217835386e+00 ],
        [ 5.6409995645293e-01, -4.9833002843976e-01, -7.1824684660961e-01,  1.5328223824552e+00 ],
    ])


def displacement_length(T):
    '''displacement_length: Kelvin -> m

Vortex core displacement length as a function of temperature.
(Ref. Table 20.1)

'''
    T = _to_array(T)
    return 10**(_displacement(np.log10(1 - T/T_lambda)) - 10)

displacement_length.range = [(1 - 10**x)*T_lambda for x in _displacement.range][-1::-1]
